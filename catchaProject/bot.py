import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from catchaProject.audioProcessing import AudioProcessor, Audio
from catchaProject.checkScam import ScamAnalyzer
from catchaProject.config import AUDIO_DIR, BOT_API, TRANSCRIPT_DIR

bot = Bot(token=BOT_API)
dp = Dispatcher()
processor = AudioProcessor()
sa = ScamAnalyzer()

semaphore = asyncio.Semaphore()
queue = []

FileLimit = 10_485_760


class States(StatesGroup):
    start = State()
    audio_wait = State()


async def send_welcome(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ", callback_data="start_audio"
                )
            ]
        ]
    )
    await message.answer(
        """–ü—Ä–∏–≤–µ—Ç! üëã
–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º.

‚ö†Ô∏è –ü–æ–∫–∞ —á—Ç–æ —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å

üí° –í –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.  """,
        reply_markup=keyboard,
    )


async def start_audio_processing(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞—É–¥–∏–æ (mp3, wav –∏ —Ç.–¥. –Ω–µ –±–æ–ª—å—à–µ {FileLimit/1048576} MB), –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞."
    )
    await state.set_state(States.audio_wait)


async def handle_audio(message: Message, state: FSMContext):
    userId = message.from_user.id
    audio = message.audio
    audioId = audio.file_id
    if audio.file_size >= FileLimit:
        await message.answer(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ {FileLimit/1048576} MB")
        return

    queue.append(userId)
    pos = len(queue)
    if pos > 1:
        await message.answer(f"–≤—ã {pos}-–π –≤ –æ—á–µ—Ä–µ–¥–∏")
    async with semaphore:
        path = AUDIO_DIR + audioId
        await bot.download(audioId, path)
        await message.answer(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª '{audio.file_name}' –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        logging.info(f"–§–∞–π–ª {audioId} –æ—Ç {userId} {message.from_user.username}")

        audio = Audio(path)
        processor(audio)

        transcriptPath = TRANSCRIPT_DIR + audioId + ".json"
        audio.save_to_json(transcriptPath)
        try:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ", callback_data="start_audio"
                        )
                    ]
                ]
            )
            predict = sa.run(transcriptPath)
            answer = f"–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ: {predict[1]}%"
            logging.info(audioId + " " + answer)
            await message.answer(answer, reply_markup=keyboard)
            await state.set_state(States.start)
        except RuntimeError:
            await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

        queue.pop(0)


def register_handlers():
    dp.message.register(send_welcome, Command("start"))
    dp.callback_query.register(start_audio_processing, F.data == "start_audio")
    dp.message.register(handle_audio, States.audio_wait, F.content_type == "audio")


async def main():
    register_handlers()
    await dp.start_polling(bot, skip_updates=True)
